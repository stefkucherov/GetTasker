Описание проекта:
необходимо создать API-сервис для управления пользователями и задачами с использованием FastAPI. Сервис должен предоставлять возможность создания, чтения, обновления и удаления (CRUD) пользователей и задач. Кроме того, необходимо реализовать аутентификацию и авторизацию пользователей, а также написать тесты для всех реализованных функций

Требования:

0. Модели данных:
   - Пользователь:
     - ID (целое число, автоинкремент)
     - Имя (строка)
     - Электронная почта (строка)
     - Пароль (строка)
   - Задача:
     - ID (целое число, автоинкремент)
     - Название (строка)
     - Описание (строка)
     - Статус (строка, возможные значения: "новая", "в процессе", "завершена")
     - Пользователь_ID (внешний ключ на модель Пользователь)

1. API Endpoint'ы:
   - Пользователи:
     - GET /users - Получить список всех пользователей
     - GET /users/{user_id} - Получить информацию о конкретном пользователе
     - POST /users - Создать нового пользователя
     - PUT /users/{user_id} - Обновить информацию о пользователе
     - DELETE /users/{user_id} - Удалить пользователя
   - Задачи:
     - GET /tasks - Получить список всех задач
     - GET /tasks/{task_id} - Получить информацию о конкретной задаче
     - POST /tasks - Создать новую задачу
     - PUT /tasks/{task_id} - Обновить информацию о задаче
     - DELETE /tasks/{task_id} - Удалить задачу

2. Аутентификация и авторизация:
   - Использовать JWT токены для аутентификации пользователей
   - Реализовать защиту маршрутов, чтобы только аутентифицированные пользователи могли создавать, обновлять и удалять задачи
   - Ограничить доступ к задачам только для их владельцев

3. Валидация:
   - Использовать Pydantic для валидации входных данных

4. База данных:
   - Использовать SQLAlchemy для работы с базой данных SQLite

5. Документация:
   - Автоматически сгенерированная документация API с использованием Swagger (доступна по адресу `/docs`)

6. Тестирование:
   - Написать тесты для всех реализованных функций, включая:
     - Тесты для проверки корректности работы CRUD операций для пользователей и задач
     - Тесты для проверки аутентификации и авторизации
     - Тесты для проверки валидации входных данных

7. Дополнительно (не обязательно!):
 - Docker
    - Создать Dockerfile для контейнеризации приложения
    - Создать docker-compose файл для простого развёртывания базы данных и приложения
    - Обеспечить возможность запуска тестов в контейнере

Рекомендуемые инструменты:
- FastAPI:
  - Pydantic для валидации данных
  - SQLAlchemy для работы с базой данных
  - FastAPI Users для управления аутентификацией
  - Pytest для написания тестов

Дополнительные требования:
- Код должен быть структурированным и хорошо документированным
- С выполненной репой прикладывать видео раскатки сервера и пример его работы
- Проект должен включать README файл с инструкциями по запуску и тестированию


my_project/
│
├── app/
│   ├── __init__.py
│   ├── main.py
│   ├── routers/
│   │   ├──  ├── __inpy
│   │   ├── users.py
│   │   ├── items.py
│   ├── models/
│   │   ├── main.py
│py
│   │   ├── user.py
│   │   ├── item.py
│   ├── schemas/
│   │   ├─── main.py
py
│   │   ├── user.py
│   │   ├── item.py
│   ├── services/
│   │   ├── main.py
│py
│   │   ├── user_service.py
│   │   ├── item_service.py
│   ├── database.py
│   ├── config.py
│   └── exceptions.py
│
├── tests/
│   ├──.py
│   │ py
│   ├── test_users.py
│   ├── test_items.py
│   └── conftest.py
│
├── alembic/
│   ├── versions/
│   ├── env.py
│   └── alembic.ini
│
├── requirements.txt
├── .env
├── Dockerfile
└── docker-compose.yml
